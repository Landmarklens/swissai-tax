name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # Backend Python checks
  backend-check:
    runs-on: ubuntu-latest
    name: Backend Code Quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements-apprunner.txt
        pip install flake8 black isort

    - name: Check code formatting with black
      run: |
        cd backend
        black --check . || echo "Code formatting issues found"

    - name: Check import sorting with isort
      run: |
        cd backend
        isort --check-only . || echo "Import sorting issues found"

    - name: Lint with flake8
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

  # Frontend checks
  frontend-check:
    runs-on: ubuntu-latest
    name: Frontend Code Quality

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --legacy-peer-deps

    - name: Check for security vulnerabilities
      run: |
        npm audit --audit-level=high || true

    - name: Build application
      run: |
        npm run build

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run Trivy security scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'

  # Deployment status notification
  notify-deployment:
    runs-on: ubuntu-latest
    name: Deployment Status
    needs: [backend-check, frontend-check]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deployment Information
      run: |
        echo "âœ… All checks passed!"
        echo ""
        echo "ðŸ“¦ Deployments are handled automatically:"
        echo "- Backend: AWS App Runner (auto-deploy enabled)"
        echo "- Frontend: AWS Amplify (auto-deploy enabled)"
        echo ""
        echo "ðŸ”— URLs:"
        echo "- API: https://api.swissai.tax"
        echo "- App: https://swissai.tax"
        echo ""
        echo "ðŸ“Š Monitor deployments:"
        echo "- App Runner: https://console.aws.amazon.com/apprunner"
        echo "- Amplify: https://console.aws.amazon.com/amplify"